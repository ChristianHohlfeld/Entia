Sample:
- how to spawn A LOT of prefabs without the overhead of Unity objects while still designing them in the editor?
- add an injectable for Unity components that acts as a shorthand for all 'Unity<T>' operations

Documentation:
- add: CONTRIBUTING.md
	- clone repository
	- make sure you have .Net Core SDK 2.0+
	- CTRL+SHIFT+P, 'Run Test Task' -> should run tests without failure
	- CTRL+SHIFT+B, 'publish release' -> should create the 'Release' folder in root
- make a 'Entia' game jam
- make a 'Entia.Unity' game jam

- ENTIA WIKI
	- add documentation for [Default]
	- mention in the description of 'Injectable' and of 'World' that using the world in a system will make thread safety analysis fail
	- Extensibility sections are hard to understand
		- The page on extensibility should include a graph that links all concepts together
	- extensibility of Node.md (IBuilder)
	- extensibility of System.md (IScheduler)
	- add FAQ:
		- Why everything is a struct? (issue #8)
- ENTIA.UNITY WIKI
	- feedback:
		// Run() mais en fixed update pour gérer la physique de unity?
		// Time: manque accès au unscaled, fixed, etc
		// Field default values: cannot have in struct. Other way?
		// Aimerait pouvoir mettre [Header("Boba")] sur component fields comme sur des monobehaviors
		// Aimerait pouvoir mettre [Hide] en plus de [Disable] sur les component fields pour pouvoir cacher les variables internes inutiles à exposer à l'editeur
		// Il y a t-il une façon d'utiliser les méthodes de Unity comme OnCollisionEnter, OnTriggerEnter sans passer par un MonoBehaviour?
		// Comment getter le world en dehors d'un système? -> via un lien vers le WorldReference ou via le WorldRegistry 
		// Pourquoi est-ce que les fields d'un MonoBehaviour ne sont pas injectés?
	- replace screenshots with light skin versions
	- mention: Entity is converted to EntityReference and back by the generator
	- add: tested on {list of platforms}
	- mention: In almost all cases, there is a Unity template that will prevent you from forgetting the _interface_.
	
- Gotchas:
	- structural operations are deferred (Add/Remove/Create/Destroy) for groups
	- trying to query a component type directly rather than using 'Read<T>' or 'Write<T>'
	- forgetting to put a 'ref' on a parameter that mutates a component or resource
		: enforced by the Visual Studio extension
	- forgetting 'ref' when declaring a variable that unwraps a 'Write<T>'
		: enforced by the Visual Studio extension
	- forgetting to add Nodes.Default in the controller sequence
	- nesting generics deeper than 6 (limit is 7 but 1 nesting depth is needed internally)
	- users need to have dotnet core 2.1 installed for the generator to work
		: added error message

Frictions:
- add tests similar to 'Inject' that scans assemblies but for other elements (such as components)
- make a type builder for generic types to make tests even more generative
- can not add a component/resource by dragging the file on a gameObject

Features:
- remove analyzer warning for type members in components/resources/etc.
- are disabled GameObjects initialized (in scene or instantiated)?
- show controller nodes in chunks?
- move resolve logic from World to Resolvers
- exclude entities that have the [IsDisabled] component by default
	- might exclude entities from group for a non-explicit reason
	- allow user to define this implicit exclusion somehow?
- Consider using Travis CI https://travis-ci.org/ for automated testing.
- make Components.Set / Components.Remove / Entities.Create / Entities.Destroy thread safe?
	- this might be very hard or impossible to accomplish without locking
- improve better removal actions in tests by querying all removable entities from the world and choosing from that query
	- currently, a random entity is chosen from the world and if it is not removable, the action is considered invalid
	- this makes removal actions much less often successful, thus it reduces the overall effectiveness of the sequences
	- it also skews the chosen probabilities in favor of add actions
- run tests on device with IL2CPP build

Bugs:
- Fix "The C# project "Entia.Analyze.Vsix" is targeting ".NETFramework,Version=v4.7", which is not installed on this machine." warning if a later version of .Net Framework is installed.

Optimization:
- Shrink component segment stores by half when the 'count < capacity / 4'
	- This will free up some memory
	- This behaviour might cause allocations if lots of entities are moved around causing some segment to grow alot and shrink soon after
	- Shrink could only happen after a given number of frames (ex: 100) where the 'count < capacity / 4'
	- Note that shrinking will force all groups to refresh all their pointers, so it should not be done frequently
	- Shrink threshold could be set to 'count < capactity / 8'
- Components.HasAll<T1, T2, ...>, Components.HasAny<T1, T2, ...>, Components.HasNone<T1, T2, ...>
	- would retrieve a statically cached mask that represents all generic types
	- would resolve in a single BitMask comparison rather than multiple separate ones
	- could be done using a tuple type rather than a bagillion overloads
		- ex: Components.HasAll<(Boba, Fett)>()
		- I need the 'ITuple' interface to appropriately constrain the generic argument, but it exists only in .Net Standard 2.1 which is not yet supported by Unity
- do not reserve a store for empty components

Questions:
- should system methods be implemented explicitly by convention?
	- prevents cases where a user changes the system interfaces and doesn't understand why the methods are not called anymore since the compiler will emit an error
- instead of having Queryables.Read<T>, Dependables.Read<T> and Queriers.Read<T>, etc. include the others inside the main one?
	- Queryables.Read<T> would have an inner class called Dependable and one called Querier, etc.
- merge Dependables.Read<T> and Queryable.Read<T>?
- how to instantiate efficiently entities and entity references?
	- in the 'Templates' module, one should be able to exchange an Entity, an EntityReference or a TemplateReference with a 'Template'
	- the TemplateReference will have 2 options: 'Pure' and 'Pool'
		- 'Pure' indicates that only the Entia elements should be considered in the produced template, thus stripping away all the Unity hierarchy
		- if 'Pure' is false, the Unity hierarchy will be instantiated and all Entia references will be stripped (in debug, EntityReference will remain to display their components)
		- 'Pool' indicates that the Unity hierarchy should be pooled to limit the instantiations; note that this requires proper initialization of Unity components
- how to allow to display the System's state?
	- since the system instances are hidden, there is no way to retrieve them from outside
	- even if one had a reference to a system, all system state is forced to be private, thus still inaccessible
	- Solution 1:
		- create a 'Systems' module that gives access to active system instances
		- allow a system to expose its state publicly
			- should properties be used to differenciate from injected fields?
			- should an attribute be used to ignore the injection of some fields (opt-out injection)?
			- should an attribute be used to inject fields (opt-in injection)?
		- this allows a separate MonoBehaviour to retrieve the system and its state and display it
	- Solution 2:
		- store the state to display in a 'Resource'
		- since all fields are meant to be public in a resource, a separate MonoBehaviour will be able to display the state
		- this exposes the state to all systems but is more inline with Entia
- find a better way to enable/disable profiling than using Application.isEditor?
	- using ControllerModifiers?
- leave 'Controller' state wrappers in builds?
	- the performance cost might not be worth any effort
	- could be useful to be able to disable a system in a build
- better way to initialize the World
	- currently using a Factory in WorldReference but it seems that there might be a better pattern
- systems as structs...
	- since C# has a poor type inference for functions, it is more lightweigth to register systems like so: Build<ASystem>() vs Build<ASystem.Data>(ASystem.Run)
	- allows to add a dispose mechanism and/or other system events
	- data can be accessed directly through fields rather than 'data.Something'
	- data in systems is less protected
		- public fields will have to be providable
		- private fields will be ignored
		- this way, a non-providable public field that tries to expose the system's data to the outside world, will fail on provision
	- will make automatic instantiation possible
		- very practical for prototyping
		- ordering will have to be definable manually
- special Disabled<T> where T : IComponent tag that disables specific components?
	- Read<T> and Write<T> queries will implicitly exclude Disabled<T>
	- doubles the number of component indices
	- Read<T> and Write<T> will have to add it to their static Filter
- generate deconstructors for ISystemData?
- how to improve the 'TryGet' flow
	- can I somehow return a ref?
- how to remove static interfaces?
	- The main reason they exist is for insuring proper AOT compilation
	- Maybe this AOT issues could be resolved via code generation?
- Unity defer?
				
- parameterized templates?
	- templates could require arguments when instantiated in order to set some required values on components
	- another idea would be to allow to require an 'out Write<T>' to initialize to component
		- would be able to skip the dictionary lookup
		- much more general solution than the previous one
		- what happens if the template did not have a 'T' type?
			- could return an 'out Write<T>?' instead to represent nullability
			
- is separating 'Read' and 'Write' really useful?
	- it makes dependencies more obvious and 'might' allow for some automatic scheduling of systems and/or prevention of race conditions
	- in debug, the ComponentManager could check if two thread are trying to write to the same component types
		- when iterating a group, it would have to notify the ComponentManager that a given thread is reading/writing to a set of types
		- 'GetEnumerator' would call 'WriteLock(types)' and/or 'ReadLock(types)' and 'Dispose' would call 'WriteUnlock(types)' and/or 'ReadUnlock()'
		- 'WriteLock' and 'ReadLock' could also return a 'Lock' struct that would have to be disposed
		- might not be needed if dependencies are declared properly (see "use the function parameters of a system for dependency declarations?")
	- performance-wise it makes no difference in Production
	- all dependencies can be 'Write' by default and can be specified to be 'Read'

Rejected:
- make Read<T> and Write<T> delegates
	- this would make the syntax more lightweight
		- ex: ref var position = item.Item1.Value; /*becomes*/ ref var position = item.Item1();
	- since the getter of the property 'Value' is a function, it might not make a performance difference
		- measure it in case of compiler optimizations
	- requires a way
	: wouldn't work properly with '?' types since delegates are not structs; it would mean that nullability would be hidden
- built-in Hierarchy component
	- should use an 'IndexStore' since it needs to be fast for entity queries and will most likely be very common
	: should not be a component, but a module since changes to one hierarchy must echo throughout the other related hierarchies
	
Answers:
- should I keep 'ISystem' mandatory or system interfaces should derive from it?
	: it is useless to write it everytime and since the interfaces are already specific to systems, lets just make the dependency explicit and save some boilerplate code
- external project vs Unity project
	: External project:
		- C#7 features
			- 'is var'
			- 'out var'
			- 'ref' returns and locals
			- 'ref readonly' returns and locals
			- better extension resolution 
				- component named extensions do work
				- we don't have to use index-based unpacking of group items (First, Second, etc.)
			- tuple syntax (construction and deconstruction)
		- More scattered
			- extensions and generated components must go in 2 different projects
				- we want the extensions to be usable within the external project
				- we want generated components to remain in script files in Unity such that they each have a specific meta
			- enforces that we don't use the generated components in the game code
			- will sometimes require to have 2 Visual Studio instances opened at the same time
			- more complexity from managing 2 Visual Studio solutions
		- Would most likely be a temporary setup that would be dismantled when C#7 becomes available in Unity
		- Better code stripping
			- Unity strips code from external DLLs
			- Unity doesn't strip code from script files
			- The amount of generated extensions doesn't matter since the unused ones will be stripped
			- Relies on the fact that we use stripping and that it works properly
		- Detecting renames is complicated
			- I have no good way to semantically map declared components to their generated components since they are in different DLLs
			- I might have to generate mapping C# files in the external project that would get compiled with the DLL
				- The mappings might get stripped by Unity though
		- Can't use Unity's #if directives
			- Enforces that we correctly separate editor code from non-editor code
			- Requires that platform specific code is placed in the Unity project or that it uses a runtime check

- support for multiple components of the same type?
	: might not be really useful, but since it doesn't hinder a big performance cost, I've left it there
