/* DO NOT MODIFY: The content of this file has been generated by the script 'Injectables.csx'. */

using Entia.Core;
using Entia.Dependables;
using Entia.Injectors;
using Entia.Modules;
using Entia.Queryables;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

namespace Entia.Injectables
{
    public readonly struct Query<T> : IEnumerable<T>, IInjectable, IDepend<Dependables.Read<Entity>, T>
        where T : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T>(world.Queriers().Query<T>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<T>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<T> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<T> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out T item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<T>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<T> IEnumerable<T>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2> : IEnumerable<All<T1, T2>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2>
        where T1 : struct, IQueryable where T2 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2>(world.Queriers().Query<All<T1, T2>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2>> IEnumerable<All<T1, T2>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2, T3> : IEnumerable<All<T1, T2, T3>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2, T3>(world.Queriers().Query<All<T1, T2, T3>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2, T3>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2, T3>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2, T3>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2, T3> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2, T3>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2, T3>> IEnumerable<All<T1, T2, T3>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2, T3, T4> : IEnumerable<All<T1, T2, T3, T4>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2, T3, T4>(world.Queriers().Query<All<T1, T2, T3, T4>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2, T3, T4>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2, T3, T4>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2, T3, T4>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2, T3, T4>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4>> IEnumerable<All<T1, T2, T3, T4>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2, T3, T4, T5> : IEnumerable<All<T1, T2, T3, T4, T5>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2, T3, T4, T5>(world.Queriers().Query<All<T1, T2, T3, T4, T5>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2, T3, T4, T5>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2, T3, T4, T5>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2, T3, T4, T5>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2, T3, T4, T5>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5>> IEnumerable<All<T1, T2, T3, T4, T5>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2, T3, T4, T5, T6> : IEnumerable<All<T1, T2, T3, T4, T5, T6>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2, T3, T4, T5, T6>(world.Queriers().Query<All<T1, T2, T3, T4, T5, T6>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2, T3, T4, T5, T6>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2, T3, T4, T5, T6>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6>> IEnumerable<All<T1, T2, T3, T4, T5, T6>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2, T3, T4, T5, T6, T7> : IEnumerable<All<T1, T2, T3, T4, T5, T6, T7>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6, T7>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2, T3, T4, T5, T6, T7>(world.Queriers().Query<All<T1, T2, T3, T4, T5, T6, T7>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6, T7> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6, T7>> IEnumerable<All<T1, T2, T3, T4, T5, T6, T7>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2, T3, T4, T5, T6, T7, T8> : IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6, T7, T8>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2, T3, T4, T5, T6, T7, T8>(world.Queriers().Query<All<T1, T2, T3, T4, T5, T6, T7, T8>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6, T7, T8> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6, T7, T8>> IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public readonly struct Query<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>, IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable where T9 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Query<T1, T2, T3, T4, T5, T6, T7, T8, T9>(world.Queriers().Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(member), world.Entities());
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.EntityEnumerable Entities => _query.Entities(_entities);

        readonly Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>> _query;
        readonly Modules.Entities _entities;

        public Query(Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>> query, Modules.Entities entities)
        {
            _query = query;
            _entities = entities;
        }

        public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6, T7, T8, T9> item) => _query.TryGet(entity, out item);

        public Modules.Query.Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>> IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
}