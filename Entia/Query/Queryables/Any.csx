IEnumerable<string> Generate(int depth)
{
    IEnumerable<string> GenericParameters(int count)
    {
        for (var i = 1; i <= count; i++)
            yield return $"T{i}";
    }

    var context = "context";
    var world = $"{context}.World";
    var queriers = "queriers";
    for (var i = 2; i <= depth; i++)
    {
        var generics = GenericParameters(i).ToArray();
        var parameters = string.Join(", ", generics);
        var type = $"Any<{parameters}>";
        var constraints = string.Join(" ", generics.Select(generic => $"where {generic} : struct, IQueryable"));
        var fields = string.Join(Environment.NewLine, generics.Select((generic, index) =>
$@"        /// <summary>
        /// The value{index + 1}.
        /// </summary>
        public readonly Maybe<{generic}> Value{index + 1};"));
        var constructors = string.Join(
            Environment.NewLine,
            generics.Select((generic, index) =>
$@"        /// <summary>
        /// Initializes a new instance of the <see cref=""Any{{{parameters}}}""/> struct.
        /// </summary>
        public Any(in {generic} value) : this() {{ Value{index + 1} = value; }}"));
        var queryIfs = string.Join(
            $"{Environment.NewLine}                ",
            generics.Select((generic, index) => $"if ({queriers}.TryQuery<{generic}>({context}, out var query{index + 1})) {{ query = new Query<{type}>(index => new {type}(query{index + 1}.Get(index)), query{index + 1}.Types); return true; }}"));
        var queryDeclarations = string.Join(
            Environment.NewLine,
            generics.Select((generic, index) => $"var query{index + 1} = {queriers}.Query<{generic}>();"));

        yield return
$@"    /// <summary>
    /// Query that must satisfy at least one of its sub queries.
    /// Only the first match will be kept.
    /// </summary>
    [ThreadSafe]
    public readonly struct {type} : IQueryable {constraints}
    {{
        sealed class Querier : Querier<{type}>
        {{
            public override bool TryQuery(in Context {context}, out Query<{type}> query)
            {{
                var {queriers} = {world}.Queriers();
                {queryIfs}
                query = default;
                return false;
            }}
        }}

        [Implementation]
        static readonly Querier _querier = new Querier();

{fields}
{constructors}
    }}";
    }
}

var file = "Any";
var code =
$@"/* DO NOT MODIFY: The content of this file has been generated by the script '{file}.csx'. */

using Entia.Core;
using Entia.Core.Documentation;
using Entia.Modules;
using Entia.Modules.Query;
using Entia.Queriers;

namespace Entia.Queryables
{{
{string.Join(Environment.NewLine + Environment.NewLine, Generate(7))}
}}";

File.WriteAllText($"./{file}.cs", code);