IEnumerable<string> Generate(int depth)
{
    IEnumerable<string> GenericParameters(int count)
    {
        for (var i = 1; i <= count; i++)
            yield return $"T{i}";
    }

    for (var i = 2; i <= depth; i++)
    {
        var generics = GenericParameters(i).ToArray();
        var type = $"All<{string.Join(", ", generics)}>";
        var interfaces = $"IQueryable, IDepend<{string.Join(", ", generics)}>";
        var constraints = string.Join(" ", generics.Select(generic => $"where {generic} : struct, IQueryable"));
        var fields = string.Join(" ", generics.Select((generic, index) => $"public readonly {generic} Value{index + 1};"));
        var inValues = string.Join(", ", generics.Select((generic, index) => $"in {generic} value{index + 1}"));
        var initializers = string.Join(" ", generics.Select((_, index) => $"Value{index + 1} = value{index + 1};"));

        var tryQueries = string.Join(
            $" && ",
            generics.Select((generic, index) => $"world.Queriers().TryQuery<{generic}>(segment, out var query{index + 1})"));
        var queryGets = string.Join(
            $", ",
            generics.Select((_, index) => $"query{index + 1}.Get(index)"));
        var queryTypes = string.Join(
            $", ",
            generics.Select((_, index) => $"query{index + 1}.Types"));
        yield return
$@"    public readonly struct {type} : {interfaces} {constraints}
    {{
        sealed class Querier : Querier<{type}>
        {{
            public override bool TryQuery(Segment segment, World world, out Query<{type}> query)
            {{
                if ({tryQueries})
                {{
                    query = new Query<{type}>(index => new {type}({queryGets}), {queryTypes});
                    return true;
                }}

                query = default;
                return false;
            }}
        }}

        [Querier]
        static readonly Querier _querier = new Querier();
        {fields}
        public All({inValues}) {{ {initializers} }}
    }}";
    }
}

var file = "All";
var code =
$@"/* DO NOT MODIFY: The content of this file has been generated by the script '{file}.csx'. */

using Entia.Core;
using Entia.Modules;
using Entia.Modules.Component;
using Entia.Modules.Query;
using Entia.Queriers;
using Entia.Queryables;
using Entia.Dependables;

namespace Entia.Queryables
{{
{string.Join(Environment.NewLine + Environment.NewLine, Generate(9))}
}}";

File.WriteAllText($"./{file}.cs", code);