/* DO NOT MODIFY: The content of this file has been generated by the script 'Any.csx'. */

using Entia.Core;
using Entia.Modules;
using Entia.Modules.Component;
using Entia.Modules.Query;
using Entia.Queriers;
using Entia.Queryables;
using Entia.Dependables;
using Entia.Dependers;
using Entia.Dependencies;
using System.Collections.Generic;
using System.Reflection;

namespace Entia.Queryables
{
    public readonly struct Any<T1, T2> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2>>(index => new Any<T1, T2>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2>>(index => new Any<T1, T2>(query2.Get(index)), query2.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
    }

    public readonly struct Any<T1, T2, T3> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2, T3>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2, T3>>(index => new Any<T1, T2, T3>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2, T3>>(index => new Any<T1, T2, T3>(query2.Get(index)), query2.Types); return true; }
                if (world.Queriers().TryQuery<T3>(segment, out var query3)) { query = new Query<Any<T1, T2, T3>>(index => new Any<T1, T2, T3>(query3.Get(index)), query3.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T3>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2; public readonly Maybe<T3> Value3;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
    }

    public readonly struct Any<T1, T2, T3, T4> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2, T3, T4>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2, T3, T4>>(index => new Any<T1, T2, T3, T4>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2, T3, T4>>(index => new Any<T1, T2, T3, T4>(query2.Get(index)), query2.Types); return true; }
                if (world.Queriers().TryQuery<T3>(segment, out var query3)) { query = new Query<Any<T1, T2, T3, T4>>(index => new Any<T1, T2, T3, T4>(query3.Get(index)), query3.Types); return true; }
                if (world.Queriers().TryQuery<T4>(segment, out var query4)) { query = new Query<Any<T1, T2, T3, T4>>(index => new Any<T1, T2, T3, T4>(query4.Get(index)), query4.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T3>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T4>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2; public readonly Maybe<T3> Value3; public readonly Maybe<T4> Value4;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
    }

    public readonly struct Any<T1, T2, T3, T4, T5> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2, T3, T4, T5>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2, T3, T4, T5>>(index => new Any<T1, T2, T3, T4, T5>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2, T3, T4, T5>>(index => new Any<T1, T2, T3, T4, T5>(query2.Get(index)), query2.Types); return true; }
                if (world.Queriers().TryQuery<T3>(segment, out var query3)) { query = new Query<Any<T1, T2, T3, T4, T5>>(index => new Any<T1, T2, T3, T4, T5>(query3.Get(index)), query3.Types); return true; }
                if (world.Queriers().TryQuery<T4>(segment, out var query4)) { query = new Query<Any<T1, T2, T3, T4, T5>>(index => new Any<T1, T2, T3, T4, T5>(query4.Get(index)), query4.Types); return true; }
                if (world.Queriers().TryQuery<T5>(segment, out var query5)) { query = new Query<Any<T1, T2, T3, T4, T5>>(index => new Any<T1, T2, T3, T4, T5>(query5.Get(index)), query5.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T3>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T4>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T5>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2; public readonly Maybe<T3> Value3; public readonly Maybe<T4> Value4; public readonly Maybe<T5> Value5;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
    }

    public readonly struct Any<T1, T2, T3, T4, T5, T6> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2, T3, T4, T5, T6>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2, T3, T4, T5, T6>>(index => new Any<T1, T2, T3, T4, T5, T6>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2, T3, T4, T5, T6>>(index => new Any<T1, T2, T3, T4, T5, T6>(query2.Get(index)), query2.Types); return true; }
                if (world.Queriers().TryQuery<T3>(segment, out var query3)) { query = new Query<Any<T1, T2, T3, T4, T5, T6>>(index => new Any<T1, T2, T3, T4, T5, T6>(query3.Get(index)), query3.Types); return true; }
                if (world.Queriers().TryQuery<T4>(segment, out var query4)) { query = new Query<Any<T1, T2, T3, T4, T5, T6>>(index => new Any<T1, T2, T3, T4, T5, T6>(query4.Get(index)), query4.Types); return true; }
                if (world.Queriers().TryQuery<T5>(segment, out var query5)) { query = new Query<Any<T1, T2, T3, T4, T5, T6>>(index => new Any<T1, T2, T3, T4, T5, T6>(query5.Get(index)), query5.Types); return true; }
                if (world.Queriers().TryQuery<T6>(segment, out var query6)) { query = new Query<Any<T1, T2, T3, T4, T5, T6>>(index => new Any<T1, T2, T3, T4, T5, T6>(query6.Get(index)), query6.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T3>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T4>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T5>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T6>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2; public readonly Maybe<T3> Value3; public readonly Maybe<T4> Value4; public readonly Maybe<T5> Value5; public readonly Maybe<T6> Value6;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
    }

    public readonly struct Any<T1, T2, T3, T4, T5, T6, T7> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6, T7>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2, T3, T4, T5, T6, T7>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(index => new Any<T1, T2, T3, T4, T5, T6, T7>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(index => new Any<T1, T2, T3, T4, T5, T6, T7>(query2.Get(index)), query2.Types); return true; }
                if (world.Queriers().TryQuery<T3>(segment, out var query3)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(index => new Any<T1, T2, T3, T4, T5, T6, T7>(query3.Get(index)), query3.Types); return true; }
                if (world.Queriers().TryQuery<T4>(segment, out var query4)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(index => new Any<T1, T2, T3, T4, T5, T6, T7>(query4.Get(index)), query4.Types); return true; }
                if (world.Queriers().TryQuery<T5>(segment, out var query5)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(index => new Any<T1, T2, T3, T4, T5, T6, T7>(query5.Get(index)), query5.Types); return true; }
                if (world.Queriers().TryQuery<T6>(segment, out var query6)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(index => new Any<T1, T2, T3, T4, T5, T6, T7>(query6.Get(index)), query6.Types); return true; }
                if (world.Queriers().TryQuery<T7>(segment, out var query7)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(index => new Any<T1, T2, T3, T4, T5, T6, T7>(query7.Get(index)), query7.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T3>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T4>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T5>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T6>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T7>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2; public readonly Maybe<T3> Value3; public readonly Maybe<T4> Value4; public readonly Maybe<T5> Value5; public readonly Maybe<T6> Value6; public readonly Maybe<T7> Value7;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
        public Any(in T7 value) : this() { Value7 = value; }
    }

    public readonly struct Any<T1, T2, T3, T4, T5, T6, T7, T8> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6, T7, T8>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query2.Get(index)), query2.Types); return true; }
                if (world.Queriers().TryQuery<T3>(segment, out var query3)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query3.Get(index)), query3.Types); return true; }
                if (world.Queriers().TryQuery<T4>(segment, out var query4)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query4.Get(index)), query4.Types); return true; }
                if (world.Queriers().TryQuery<T5>(segment, out var query5)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query5.Get(index)), query5.Types); return true; }
                if (world.Queriers().TryQuery<T6>(segment, out var query6)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query6.Get(index)), query6.Types); return true; }
                if (world.Queriers().TryQuery<T7>(segment, out var query7)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query7.Get(index)), query7.Types); return true; }
                if (world.Queriers().TryQuery<T8>(segment, out var query8)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(query8.Get(index)), query8.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T3>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T4>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T5>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T6>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T7>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T8>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2; public readonly Maybe<T3> Value3; public readonly Maybe<T4> Value4; public readonly Maybe<T5> Value5; public readonly Maybe<T6> Value6; public readonly Maybe<T7> Value7; public readonly Maybe<T8> Value8;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
        public Any(in T7 value) : this() { Value7 = value; }
        public Any(in T8 value) : this() { Value8 = value; }
    }

    public readonly struct Any<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IQueryable where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable where T9 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
        {
            public override bool TryQuery(Segment segment, World world, out Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>> query)
            {
                if (world.Queriers().TryQuery<T1>(segment, out var query1)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query1.Get(index)), query1.Types); return true; }
                if (world.Queriers().TryQuery<T2>(segment, out var query2)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query2.Get(index)), query2.Types); return true; }
                if (world.Queriers().TryQuery<T3>(segment, out var query3)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query3.Get(index)), query3.Types); return true; }
                if (world.Queriers().TryQuery<T4>(segment, out var query4)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query4.Get(index)), query4.Types); return true; }
                if (world.Queriers().TryQuery<T5>(segment, out var query5)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query5.Get(index)), query5.Types); return true; }
                if (world.Queriers().TryQuery<T6>(segment, out var query6)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query6.Get(index)), query6.Types); return true; }
                if (world.Queriers().TryQuery<T7>(segment, out var query7)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query7.Get(index)), query7.Types); return true; }
                if (world.Queriers().TryQuery<T8>(segment, out var query8)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query8.Get(index)), query8.Types); return true; }
                if (world.Queriers().TryQuery<T9>(segment, out var query9)) { query = new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(index => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(query9.Get(index)), query9.Types); return true; }
                query = default;
                return false;
            }
        }

        sealed class Depender : IDepender
        {
            public IEnumerable<IDependency> Depend(MemberInfo member, World world)
            {
                foreach (var dependency in world.Dependers().Dependencies<T1>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T2>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T3>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T4>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T5>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T6>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T7>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T8>()) yield return dependency;
                foreach (var dependency in world.Dependers().Dependencies<T9>()) yield return dependency;
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();
        [Depender]
        static readonly Depender _depender = new Depender();

        public readonly Maybe<T1> Value1; public readonly Maybe<T2> Value2; public readonly Maybe<T3> Value3; public readonly Maybe<T4> Value4; public readonly Maybe<T5> Value5; public readonly Maybe<T6> Value6; public readonly Maybe<T7> Value7; public readonly Maybe<T8> Value8; public readonly Maybe<T9> Value9;
        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
        public Any(in T7 value) : this() { Value7 = value; }
        public Any(in T8 value) : this() { Value8 = value; }
        public Any(in T9 value) : this() { Value9 = value; }
    }
}