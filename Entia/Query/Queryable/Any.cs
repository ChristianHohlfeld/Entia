/* DO NOT MODIFY: The content of this file has been generated by the script 'Any.csx'. */

using Entia.Dependables;
using Entia.Modules;
using Entia.Modules.Query;
using Entia.Queriers;

namespace Entia.Queryables
{
    public readonly struct Any<T1, T2> : IQueryable, IDepend<T1, T2>
        where T1 : struct, IQueryable where T2 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2>>
        {
            public override Query<Any<T1, T2>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                return new Query<Any<T1, T2>>(
                    Modules.Query.Query.Any(query1, query2),
                    (Entity entity, out Any<T1, T2> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2>(item2); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
    }
    public readonly struct Any<T1, T2, T3> : IQueryable, IDepend<T1, T2, T3>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3>>
        {
            public override Query<Any<T1, T2, T3>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                return new Query<Any<T1, T2, T3>>(
                    Modules.Query.Query.Any(query1, query2, query3),
                    (Entity entity, out Any<T1, T2, T3> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2, T3>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2, T3>(item2); return true; }
                        else if (query3.TryGet(entity, out var item3)) { value = new Any<T1, T2, T3>(item3); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;
        public readonly Maybe<T3> Value3;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
    }
    public readonly struct Any<T1, T2, T3, T4> : IQueryable, IDepend<T1, T2, T3, T4>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4>>
        {
            public override Query<Any<T1, T2, T3, T4>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                return new Query<Any<T1, T2, T3, T4>>(
                    Modules.Query.Query.Any(query1, query2, query3, query4),
                    (Entity entity, out Any<T1, T2, T3, T4> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2, T3, T4>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2, T3, T4>(item2); return true; }
                        else if (query3.TryGet(entity, out var item3)) { value = new Any<T1, T2, T3, T4>(item3); return true; }
                        else if (query4.TryGet(entity, out var item4)) { value = new Any<T1, T2, T3, T4>(item4); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;
        public readonly Maybe<T3> Value3;
        public readonly Maybe<T4> Value4;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
    }
    public readonly struct Any<T1, T2, T3, T4, T5> : IQueryable, IDepend<T1, T2, T3, T4, T5>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5>>
        {
            public override Query<Any<T1, T2, T3, T4, T5>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                return new Query<Any<T1, T2, T3, T4, T5>>(
                    Modules.Query.Query.Any(query1, query2, query3, query4, query5),
                    (Entity entity, out Any<T1, T2, T3, T4, T5> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2, T3, T4, T5>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2, T3, T4, T5>(item2); return true; }
                        else if (query3.TryGet(entity, out var item3)) { value = new Any<T1, T2, T3, T4, T5>(item3); return true; }
                        else if (query4.TryGet(entity, out var item4)) { value = new Any<T1, T2, T3, T4, T5>(item4); return true; }
                        else if (query5.TryGet(entity, out var item5)) { value = new Any<T1, T2, T3, T4, T5>(item5); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;
        public readonly Maybe<T3> Value3;
        public readonly Maybe<T4> Value4;
        public readonly Maybe<T5> Value5;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
    }
    public readonly struct Any<T1, T2, T3, T4, T5, T6> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6>>
        {
            public override Query<Any<T1, T2, T3, T4, T5, T6>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                return new Query<Any<T1, T2, T3, T4, T5, T6>>(
                    Modules.Query.Query.Any(query1, query2, query3, query4, query5, query6),
                    (Entity entity, out Any<T1, T2, T3, T4, T5, T6> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2, T3, T4, T5, T6>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2, T3, T4, T5, T6>(item2); return true; }
                        else if (query3.TryGet(entity, out var item3)) { value = new Any<T1, T2, T3, T4, T5, T6>(item3); return true; }
                        else if (query4.TryGet(entity, out var item4)) { value = new Any<T1, T2, T3, T4, T5, T6>(item4); return true; }
                        else if (query5.TryGet(entity, out var item5)) { value = new Any<T1, T2, T3, T4, T5, T6>(item5); return true; }
                        else if (query6.TryGet(entity, out var item6)) { value = new Any<T1, T2, T3, T4, T5, T6>(item6); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;
        public readonly Maybe<T3> Value3;
        public readonly Maybe<T4> Value4;
        public readonly Maybe<T5> Value5;
        public readonly Maybe<T6> Value6;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
    }
    public readonly struct Any<T1, T2, T3, T4, T5, T6, T7> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6, T7>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6, T7>>
        {
            public override Query<Any<T1, T2, T3, T4, T5, T6, T7>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                var query7 = world.Queriers().Query<T7>();
                return new Query<Any<T1, T2, T3, T4, T5, T6, T7>>(
                    Modules.Query.Query.Any(query1, query2, query3, query4, query5, query6, query7),
                    (Entity entity, out Any<T1, T2, T3, T4, T5, T6, T7> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2, T3, T4, T5, T6, T7>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2, T3, T4, T5, T6, T7>(item2); return true; }
                        else if (query3.TryGet(entity, out var item3)) { value = new Any<T1, T2, T3, T4, T5, T6, T7>(item3); return true; }
                        else if (query4.TryGet(entity, out var item4)) { value = new Any<T1, T2, T3, T4, T5, T6, T7>(item4); return true; }
                        else if (query5.TryGet(entity, out var item5)) { value = new Any<T1, T2, T3, T4, T5, T6, T7>(item5); return true; }
                        else if (query6.TryGet(entity, out var item6)) { value = new Any<T1, T2, T3, T4, T5, T6, T7>(item6); return true; }
                        else if (query7.TryGet(entity, out var item7)) { value = new Any<T1, T2, T3, T4, T5, T6, T7>(item7); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;
        public readonly Maybe<T3> Value3;
        public readonly Maybe<T4> Value4;
        public readonly Maybe<T5> Value5;
        public readonly Maybe<T6> Value6;
        public readonly Maybe<T7> Value7;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
        public Any(in T7 value) : this() { Value7 = value; }
    }
    public readonly struct Any<T1, T2, T3, T4, T5, T6, T7, T8> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6, T7, T8>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6, T7, T8>>
        {
            public override Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                var query7 = world.Queriers().Query<T7>();
                var query8 = world.Queriers().Query<T8>();
                return new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8>>(
                    Modules.Query.Query.Any(query1, query2, query3, query4, query5, query6, query7, query8),
                    (Entity entity, out Any<T1, T2, T3, T4, T5, T6, T7, T8> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item2); return true; }
                        else if (query3.TryGet(entity, out var item3)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item3); return true; }
                        else if (query4.TryGet(entity, out var item4)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item4); return true; }
                        else if (query5.TryGet(entity, out var item5)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item5); return true; }
                        else if (query6.TryGet(entity, out var item6)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item6); return true; }
                        else if (query7.TryGet(entity, out var item7)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item7); return true; }
                        else if (query8.TryGet(entity, out var item8)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8>(item8); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;
        public readonly Maybe<T3> Value3;
        public readonly Maybe<T4> Value4;
        public readonly Maybe<T5> Value5;
        public readonly Maybe<T6> Value6;
        public readonly Maybe<T7> Value7;
        public readonly Maybe<T8> Value8;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
        public Any(in T7 value) : this() { Value7 = value; }
        public Any(in T8 value) : this() { Value8 = value; }
    }
    public readonly struct Any<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable where T9 : struct, IQueryable
    {
        sealed class Querier : Querier<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
        {
            public override Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                var query7 = world.Queriers().Query<T7>();
                var query8 = world.Queriers().Query<T8>();
                var query9 = world.Queriers().Query<T9>();
                return new Query<Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(
                    Modules.Query.Query.Any(query1, query2, query3, query4, query5, query6, query7, query8, query9),
                    (Entity entity, out Any<T1, T2, T3, T4, T5, T6, T7, T8, T9> value) =>
                    {
                        if (query1.TryGet(entity, out var item1)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item1); return true; }
                        else if (query2.TryGet(entity, out var item2)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item2); return true; }
                        else if (query3.TryGet(entity, out var item3)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item3); return true; }
                        else if (query4.TryGet(entity, out var item4)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item4); return true; }
                        else if (query5.TryGet(entity, out var item5)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item5); return true; }
                        else if (query6.TryGet(entity, out var item6)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item6); return true; }
                        else if (query7.TryGet(entity, out var item7)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item7); return true; }
                        else if (query8.TryGet(entity, out var item8)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item8); return true; }
                        else if (query9.TryGet(entity, out var item9)) { value = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item9); return true; }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly Maybe<T1> Value1;
        public readonly Maybe<T2> Value2;
        public readonly Maybe<T3> Value3;
        public readonly Maybe<T4> Value4;
        public readonly Maybe<T5> Value5;
        public readonly Maybe<T6> Value6;
        public readonly Maybe<T7> Value7;
        public readonly Maybe<T8> Value8;
        public readonly Maybe<T9> Value9;

        public Any(in T1 value) : this() { Value1 = value; }
        public Any(in T2 value) : this() { Value2 = value; }
        public Any(in T3 value) : this() { Value3 = value; }
        public Any(in T4 value) : this() { Value4 = value; }
        public Any(in T5 value) : this() { Value5 = value; }
        public Any(in T6 value) : this() { Value6 = value; }
        public Any(in T7 value) : this() { Value7 = value; }
        public Any(in T8 value) : this() { Value8 = value; }
        public Any(in T9 value) : this() { Value9 = value; }
    }
}