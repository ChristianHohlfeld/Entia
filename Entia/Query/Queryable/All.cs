/* DO NOT MODIFY: The content of this file has been generated by the script 'All.csx'. */

using Entia.Dependables;
using Entia.Modules;
using Entia.Modules.Query;
using Entia.Queriers;

namespace Entia.Queryables
{
    public readonly struct All<T1, T2> : IQueryable, IDepend<T1, T2>
        where T1 : struct, IQueryable where T2 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2>>
        {
            public override Query<All<T1, T2>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                return new Query<All<T1, T2>>(
                    Modules.Query.Query.All(query1, query2),
                    (Entity entity, out All<T1, T2> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2))
                        {
                            value = new All<T1, T2>(item1, item2);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;

        public All(in T1 value1, in T2 value2)
        {
            Value1 = value1;
            Value2 = value2;
        }
    }
    public readonly struct All<T1, T2, T3> : IQueryable, IDepend<T1, T2, T3>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2, T3>>
        {
            public override Query<All<T1, T2, T3>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                return new Query<All<T1, T2, T3>>(
                    Modules.Query.Query.All(query1, query2, query3),
                    (Entity entity, out All<T1, T2, T3> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2) &&
                        query3.TryGet(entity, out var item3))
                        {
                            value = new All<T1, T2, T3>(item1, item2, item3);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;
        public readonly T3 Value3;

        public All(in T1 value1, in T2 value2, in T3 value3)
        {
            Value1 = value1;
            Value2 = value2;
            Value3 = value3;
        }
    }
    public readonly struct All<T1, T2, T3, T4> : IQueryable, IDepend<T1, T2, T3, T4>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2, T3, T4>>
        {
            public override Query<All<T1, T2, T3, T4>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                return new Query<All<T1, T2, T3, T4>>(
                    Modules.Query.Query.All(query1, query2, query3, query4),
                    (Entity entity, out All<T1, T2, T3, T4> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2) &&
                        query3.TryGet(entity, out var item3) &&
                        query4.TryGet(entity, out var item4))
                        {
                            value = new All<T1, T2, T3, T4>(item1, item2, item3, item4);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;
        public readonly T3 Value3;
        public readonly T4 Value4;

        public All(in T1 value1, in T2 value2, in T3 value3, in T4 value4)
        {
            Value1 = value1;
            Value2 = value2;
            Value3 = value3;
            Value4 = value4;
        }
    }
    public readonly struct All<T1, T2, T3, T4, T5> : IQueryable, IDepend<T1, T2, T3, T4, T5>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2, T3, T4, T5>>
        {
            public override Query<All<T1, T2, T3, T4, T5>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                return new Query<All<T1, T2, T3, T4, T5>>(
                    Modules.Query.Query.All(query1, query2, query3, query4, query5),
                    (Entity entity, out All<T1, T2, T3, T4, T5> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2) &&
                        query3.TryGet(entity, out var item3) &&
                        query4.TryGet(entity, out var item4) &&
                        query5.TryGet(entity, out var item5))
                        {
                            value = new All<T1, T2, T3, T4, T5>(item1, item2, item3, item4, item5);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;
        public readonly T3 Value3;
        public readonly T4 Value4;
        public readonly T5 Value5;

        public All(in T1 value1, in T2 value2, in T3 value3, in T4 value4, in T5 value5)
        {
            Value1 = value1;
            Value2 = value2;
            Value3 = value3;
            Value4 = value4;
            Value5 = value5;
        }
    }
    public readonly struct All<T1, T2, T3, T4, T5, T6> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2, T3, T4, T5, T6>>
        {
            public override Query<All<T1, T2, T3, T4, T5, T6>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                return new Query<All<T1, T2, T3, T4, T5, T6>>(
                    Modules.Query.Query.All(query1, query2, query3, query4, query5, query6),
                    (Entity entity, out All<T1, T2, T3, T4, T5, T6> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2) &&
                        query3.TryGet(entity, out var item3) &&
                        query4.TryGet(entity, out var item4) &&
                        query5.TryGet(entity, out var item5) &&
                        query6.TryGet(entity, out var item6))
                        {
                            value = new All<T1, T2, T3, T4, T5, T6>(item1, item2, item3, item4, item5, item6);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;
        public readonly T3 Value3;
        public readonly T4 Value4;
        public readonly T5 Value5;
        public readonly T6 Value6;

        public All(in T1 value1, in T2 value2, in T3 value3, in T4 value4, in T5 value5, in T6 value6)
        {
            Value1 = value1;
            Value2 = value2;
            Value3 = value3;
            Value4 = value4;
            Value5 = value5;
            Value6 = value6;
        }
    }
    public readonly struct All<T1, T2, T3, T4, T5, T6, T7> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6, T7>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2, T3, T4, T5, T6, T7>>
        {
            public override Query<All<T1, T2, T3, T4, T5, T6, T7>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                var query7 = world.Queriers().Query<T7>();
                return new Query<All<T1, T2, T3, T4, T5, T6, T7>>(
                    Modules.Query.Query.All(query1, query2, query3, query4, query5, query6, query7),
                    (Entity entity, out All<T1, T2, T3, T4, T5, T6, T7> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2) &&
                        query3.TryGet(entity, out var item3) &&
                        query4.TryGet(entity, out var item4) &&
                        query5.TryGet(entity, out var item5) &&
                        query6.TryGet(entity, out var item6) &&
                        query7.TryGet(entity, out var item7))
                        {
                            value = new All<T1, T2, T3, T4, T5, T6, T7>(item1, item2, item3, item4, item5, item6, item7);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;
        public readonly T3 Value3;
        public readonly T4 Value4;
        public readonly T5 Value5;
        public readonly T6 Value6;
        public readonly T7 Value7;

        public All(in T1 value1, in T2 value2, in T3 value3, in T4 value4, in T5 value5, in T6 value6, in T7 value7)
        {
            Value1 = value1;
            Value2 = value2;
            Value3 = value3;
            Value4 = value4;
            Value5 = value5;
            Value6 = value6;
            Value7 = value7;
        }
    }
    public readonly struct All<T1, T2, T3, T4, T5, T6, T7, T8> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6, T7, T8>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2, T3, T4, T5, T6, T7, T8>>
        {
            public override Query<All<T1, T2, T3, T4, T5, T6, T7, T8>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                var query7 = world.Queriers().Query<T7>();
                var query8 = world.Queriers().Query<T8>();
                return new Query<All<T1, T2, T3, T4, T5, T6, T7, T8>>(
                    Modules.Query.Query.All(query1, query2, query3, query4, query5, query6, query7, query8),
                    (Entity entity, out All<T1, T2, T3, T4, T5, T6, T7, T8> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2) &&
                        query3.TryGet(entity, out var item3) &&
                        query4.TryGet(entity, out var item4) &&
                        query5.TryGet(entity, out var item5) &&
                        query6.TryGet(entity, out var item6) &&
                        query7.TryGet(entity, out var item7) &&
                        query8.TryGet(entity, out var item8))
                        {
                            value = new All<T1, T2, T3, T4, T5, T6, T7, T8>(item1, item2, item3, item4, item5, item6, item7, item8);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;
        public readonly T3 Value3;
        public readonly T4 Value4;
        public readonly T5 Value5;
        public readonly T6 Value6;
        public readonly T7 Value7;
        public readonly T8 Value8;

        public All(in T1 value1, in T2 value2, in T3 value3, in T4 value4, in T5 value5, in T6 value6, in T7 value7, in T8 value8)
        {
            Value1 = value1;
            Value2 = value2;
            Value3 = value3;
            Value4 = value4;
            Value5 = value5;
            Value6 = value6;
            Value7 = value7;
            Value8 = value8;
        }
    }
    public readonly struct All<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IQueryable, IDepend<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable where T9 : struct, IQueryable
    {
        sealed class Querier : Querier<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
        {
            public override Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>> Query(World world)
            {
                var query1 = world.Queriers().Query<T1>();
                var query2 = world.Queriers().Query<T2>();
                var query3 = world.Queriers().Query<T3>();
                var query4 = world.Queriers().Query<T4>();
                var query5 = world.Queriers().Query<T5>();
                var query6 = world.Queriers().Query<T6>();
                var query7 = world.Queriers().Query<T7>();
                var query8 = world.Queriers().Query<T8>();
                var query9 = world.Queriers().Query<T9>();
                return new Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(
                    Modules.Query.Query.All(query1, query2, query3, query4, query5, query6, query7, query8, query9),
                    (Entity entity, out All<T1, T2, T3, T4, T5, T6, T7, T8, T9> value) =>
                    {
                        if (query1.TryGet(entity, out var item1) &&
                        query2.TryGet(entity, out var item2) &&
                        query3.TryGet(entity, out var item3) &&
                        query4.TryGet(entity, out var item4) &&
                        query5.TryGet(entity, out var item5) &&
                        query6.TryGet(entity, out var item6) &&
                        query7.TryGet(entity, out var item7) &&
                        query8.TryGet(entity, out var item8) &&
                        query9.TryGet(entity, out var item9))
                        {
                            value = new All<T1, T2, T3, T4, T5, T6, T7, T8, T9>(item1, item2, item3, item4, item5, item6, item7, item8, item9);
                            return true;
                        }

                        value = default;
                        return false;
                    });
            }
        }

        [Querier]
        static readonly Querier _querier = new Querier();

        public readonly T1 Value1;
        public readonly T2 Value2;
        public readonly T3 Value3;
        public readonly T4 Value4;
        public readonly T5 Value5;
        public readonly T6 Value6;
        public readonly T7 Value7;
        public readonly T8 Value8;
        public readonly T9 Value9;

        public All(in T1 value1, in T2 value2, in T3 value3, in T4 value4, in T5 value5, in T6 value6, in T7 value7, in T8 value8, in T9 value9)
        {
            Value1 = value1;
            Value2 = value2;
            Value3 = value3;
            Value4 = value4;
            Value5 = value5;
            Value6 = value6;
            Value7 = value7;
            Value8 = value8;
            Value9 = value9;
        }
    }
}