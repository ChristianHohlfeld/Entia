using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

IEnumerable<string> Generate(int depth)
{
    IEnumerable<string> GenericParameters(int count)
    {
        if (count == 1) yield return "T";
        else for (var i = 1; i <= count; i++) yield return $"T{i}";
    }

    for (var i = 1; i <= depth; i++)
    {
        var generics = GenericParameters(i);
        var parameters = string.Join(", ", generics);
        var itemType = i == 1 ? parameters : $"All<{string.Join(", ", generics)}>";
        var constraints = string.Join(" ", generics.Select(generic => $"where {generic} : struct, IQueryable"));

        yield return
$@"public readonly struct Query<{parameters}> : {nameof(IEnumerable)}<{itemType}>, IInjectable, IDepend<Dependables.Read<Entity>, {parameters}> 
    {constraints}
{{
	sealed class Injector : IInjector
	{{
		public Result<object> Inject(MemberInfo member, World world) => new Query<{parameters}>(world.Queriers().Query<{itemType}>(member), world.Entities());
	}}

	[Injector]
	static readonly Injector _injector = new Injector();

	public Modules.Query.Query<{itemType}>.EntityEnumerable Entities => _query.Entities(_entities);

	readonly Modules.Query.Query<{itemType}> _query;
	readonly Modules.Entities _entities;

	public Query(Modules.Query.Query<{itemType}> query, Modules.Entities entities)
	{{
		_query = query;
		_entities = entities;
	}}

	public bool Has(Entity entity) => _entities.TryMask(entity, out var mask) && _query.Fits(mask);
	public bool TryGet(Entity entity, out {itemType} item) => _query.TryGet(entity, out item);

	public Modules.Query.Query<{itemType}>.ItemEnumerator GetEnumerator() => _query.Items(_entities).GetEnumerator();
	IEnumerator<{itemType}> IEnumerable<{itemType}>.GetEnumerator() => GetEnumerator();
	IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
}}";
    }
}

var file = "Injectables";
var code =
$@"/* DO NOT MODIFY: The content of this file has been generated by the script '{file}.csx'. */

using Entia.Core;
using Entia.Dependables;
using Entia.Injectors;
using Entia.Modules;
using Entia.Queryables;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

namespace Entia.Injectables
{{
    {string.Join(Environment.NewLine, Generate(9))}
}}";

File.WriteAllText("./{file}.cs", code);