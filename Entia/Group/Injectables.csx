using System;
using System.Collections.Generic;
using System.Linq;

IEnumerable<string> Generate(int depth)
{
    IEnumerable<string> GenericParameters(int count)
    {
        if (count == 1) yield return "T";
        else for (var i = 1; i <= count; i++) yield return $"T{i}";
    }

    for (var i = 1; i <= depth; i++)
    {
        var generics = GenericParameters(i);
        var parameters = string.Join(", ", generics);
        var itemType = i == 1 ? parameters : $"All<{string.Join(", ", generics)}>";
        var constraints = string.Join(" ", generics.Select(generic => $"where {generic} : struct, IQueryable"));

        yield return
$@"public readonly struct Group<{parameters}> : IInjectable, IDepend<Dependables.Read<Entity>, {parameters}>, IEnumerable<{itemType}> 
    {constraints}
    {{
        sealed class Injector : IInjector
        {{
            public Result<object> Inject(MemberInfo member, World world) => new Group<{parameters}>(world.Groups().Get(world.Queriers().Query<{itemType}> (member)));
        }}

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly {itemType} this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group<{itemType}> _group;

        public Group(Modules.Group.Group<{itemType}> group) {{ _group = group; }}

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out {itemType} item) => _group.TryGet(entity, out item);

        public Modules.Group.Group<{itemType}>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<{itemType}> IEnumerable<{itemType}>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }}
";
    }
}

var file = "Injectables";
var code =
$@"/* DO NOT MODIFY: The content of this file has been generated by the script '{file}.csx'. */

using Entia.Core;
using Entia.Dependables;
using Entia.Injectors;
using Entia.Modules;
using Entia.Queryables;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

namespace Entia.Injectables
{{
    {string.Join(Environment.NewLine, Generate(9))}
}}";

File.WriteAllText($"./{file}.cs", code);