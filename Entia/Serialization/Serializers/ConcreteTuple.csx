using System;
using System.Collections.Generic;
using System.Linq;

IEnumerable<string> Generate(int depth)
{
    IEnumerable<string> GenericParameters(int count)
    {
        if (count == 1) yield return "T";
        else for (var i = 1; i <= count; i++) yield return $"T{i}";
    }

    for (var i = 2; i <= depth; i++)
    {
        var generics = GenericParameters(i).ToArray();
        var parameters = string.Join(", ", generics);
        var constructor = string.Join(
            ", ",
            generics.Select((generic, index) => $"Serializer<{generic}> serializer{index + 1} = null"));
        var fields = string.Join(
            " ",
            generics.Select((generic, index) => $"public readonly Serializer<{generic}> Serializer{index + 1};"));
        var initializers = string.Join(
            " ",
            generics.Select((generic, index) => $"Serializer{index + 1} = serializer{index + 1};"));
        var serialize = string.Join(
            " && ",
            generics.Select((_, index) => $"context.Serialize(instance.Item{index + 1}, Serializer{index + 1})"));
        var deserialize = string.Join(
            " && ",
            generics.Select((generic, index) => $"context.Deserialize(out {generic} item{index + 1}, Serializer{index + 1})"));
        var tuple = $"({string.Join(", ", generics.Select((_, index) => $"item{index + 1}"))})";

        yield return
$@"    public sealed class ConcreteTuple<{parameters}> : Serializer<({parameters})>
    {{
        {fields}

        public ConcreteTuple({constructor})
        {{
            {initializers}
        }}

        public override bool Serialize(in ({parameters}) instance, in SerializeContext context) =>
            {serialize};

        public override bool Instantiate(out ({parameters}) instance, in DeserializeContext context)
        {{
            if ({deserialize})
            {{
                instance = {tuple};
                return true;
            }}
            instance = default;
            return false;
        }}

        public override bool Initialize(ref ({parameters}) instance, in DeserializeContext context) => true;
    }}";
    }
}

var file = "ConcreteTuple";
var code =
$@"/* DO NOT MODIFY: The content of this file has been generated by the script '{file}.csx'. */

using Entia.Serialization;

namespace Entia.Serializers
{{
{string.Join(Environment.NewLine, Generate(7))}
}}";

File.WriteAllText($"./{file}.cs", code);