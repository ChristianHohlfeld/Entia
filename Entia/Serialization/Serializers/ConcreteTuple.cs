/* DO NOT MODIFY: The content of this file has been generated by the script 'ConcreteTuple.csx'. */

using Entia.Serialization;

namespace Entia.Serializers
{
    public sealed class ConcreteTuple<T1, T2> : Serializer<(T1, T2)>
    {
        public readonly Serializer<T1> Serializer1; public readonly Serializer<T2> Serializer2;

        public ConcreteTuple(Serializer<T1> serializer1 = null, Serializer<T2> serializer2 = null)
        {
            Serializer1 = serializer1; Serializer2 = serializer2;
        }

        public override bool Serialize(in (T1, T2) instance, in SerializeContext context) =>
            context.Serialize(instance.Item1, Serializer1) && context.Serialize(instance.Item2, Serializer2);

        public override bool Instantiate(out (T1, T2) instance, in DeserializeContext context)
        {
            if (context.Deserialize(out T1 item1, Serializer1) && context.Deserialize(out T2 item2, Serializer2))
            {
                instance = (item1, item2);
                return true;
            }
            instance = default;
            return false;
        }

        public override bool Initialize(ref (T1, T2) instance, in DeserializeContext context) => true;
    }
    public sealed class ConcreteTuple<T1, T2, T3> : Serializer<(T1, T2, T3)>
    {
        public readonly Serializer<T1> Serializer1; public readonly Serializer<T2> Serializer2; public readonly Serializer<T3> Serializer3;

        public ConcreteTuple(Serializer<T1> serializer1 = null, Serializer<T2> serializer2 = null, Serializer<T3> serializer3 = null)
        {
            Serializer1 = serializer1; Serializer2 = serializer2; Serializer3 = serializer3;
        }

        public override bool Serialize(in (T1, T2, T3) instance, in SerializeContext context) =>
            context.Serialize(instance.Item1, Serializer1) && context.Serialize(instance.Item2, Serializer2) && context.Serialize(instance.Item3, Serializer3);

        public override bool Instantiate(out (T1, T2, T3) instance, in DeserializeContext context)
        {
            if (context.Deserialize(out T1 item1, Serializer1) && context.Deserialize(out T2 item2, Serializer2) && context.Deserialize(out T3 item3, Serializer3))
            {
                instance = (item1, item2, item3);
                return true;
            }
            instance = default;
            return false;
        }

        public override bool Initialize(ref (T1, T2, T3) instance, in DeserializeContext context) => true;
    }
    public sealed class ConcreteTuple<T1, T2, T3, T4> : Serializer<(T1, T2, T3, T4)>
    {
        public readonly Serializer<T1> Serializer1; public readonly Serializer<T2> Serializer2; public readonly Serializer<T3> Serializer3; public readonly Serializer<T4> Serializer4;

        public ConcreteTuple(Serializer<T1> serializer1 = null, Serializer<T2> serializer2 = null, Serializer<T3> serializer3 = null, Serializer<T4> serializer4 = null)
        {
            Serializer1 = serializer1; Serializer2 = serializer2; Serializer3 = serializer3; Serializer4 = serializer4;
        }

        public override bool Serialize(in (T1, T2, T3, T4) instance, in SerializeContext context) =>
            context.Serialize(instance.Item1, Serializer1) && context.Serialize(instance.Item2, Serializer2) && context.Serialize(instance.Item3, Serializer3) && context.Serialize(instance.Item4, Serializer4);

        public override bool Instantiate(out (T1, T2, T3, T4) instance, in DeserializeContext context)
        {
            if (context.Deserialize(out T1 item1, Serializer1) && context.Deserialize(out T2 item2, Serializer2) && context.Deserialize(out T3 item3, Serializer3) && context.Deserialize(out T4 item4, Serializer4))
            {
                instance = (item1, item2, item3, item4);
                return true;
            }
            instance = default;
            return false;
        }

        public override bool Initialize(ref (T1, T2, T3, T4) instance, in DeserializeContext context) => true;
    }
    public sealed class ConcreteTuple<T1, T2, T3, T4, T5> : Serializer<(T1, T2, T3, T4, T5)>
    {
        public readonly Serializer<T1> Serializer1; public readonly Serializer<T2> Serializer2; public readonly Serializer<T3> Serializer3; public readonly Serializer<T4> Serializer4; public readonly Serializer<T5> Serializer5;

        public ConcreteTuple(Serializer<T1> serializer1 = null, Serializer<T2> serializer2 = null, Serializer<T3> serializer3 = null, Serializer<T4> serializer4 = null, Serializer<T5> serializer5 = null)
        {
            Serializer1 = serializer1; Serializer2 = serializer2; Serializer3 = serializer3; Serializer4 = serializer4; Serializer5 = serializer5;
        }

        public override bool Serialize(in (T1, T2, T3, T4, T5) instance, in SerializeContext context) =>
            context.Serialize(instance.Item1, Serializer1) && context.Serialize(instance.Item2, Serializer2) && context.Serialize(instance.Item3, Serializer3) && context.Serialize(instance.Item4, Serializer4) && context.Serialize(instance.Item5, Serializer5);

        public override bool Instantiate(out (T1, T2, T3, T4, T5) instance, in DeserializeContext context)
        {
            if (context.Deserialize(out T1 item1, Serializer1) && context.Deserialize(out T2 item2, Serializer2) && context.Deserialize(out T3 item3, Serializer3) && context.Deserialize(out T4 item4, Serializer4) && context.Deserialize(out T5 item5, Serializer5))
            {
                instance = (item1, item2, item3, item4, item5);
                return true;
            }
            instance = default;
            return false;
        }

        public override bool Initialize(ref (T1, T2, T3, T4, T5) instance, in DeserializeContext context) => true;
    }
    public sealed class ConcreteTuple<T1, T2, T3, T4, T5, T6> : Serializer<(T1, T2, T3, T4, T5, T6)>
    {
        public readonly Serializer<T1> Serializer1; public readonly Serializer<T2> Serializer2; public readonly Serializer<T3> Serializer3; public readonly Serializer<T4> Serializer4; public readonly Serializer<T5> Serializer5; public readonly Serializer<T6> Serializer6;

        public ConcreteTuple(Serializer<T1> serializer1 = null, Serializer<T2> serializer2 = null, Serializer<T3> serializer3 = null, Serializer<T4> serializer4 = null, Serializer<T5> serializer5 = null, Serializer<T6> serializer6 = null)
        {
            Serializer1 = serializer1; Serializer2 = serializer2; Serializer3 = serializer3; Serializer4 = serializer4; Serializer5 = serializer5; Serializer6 = serializer6;
        }

        public override bool Serialize(in (T1, T2, T3, T4, T5, T6) instance, in SerializeContext context) =>
            context.Serialize(instance.Item1, Serializer1) && context.Serialize(instance.Item2, Serializer2) && context.Serialize(instance.Item3, Serializer3) && context.Serialize(instance.Item4, Serializer4) && context.Serialize(instance.Item5, Serializer5) && context.Serialize(instance.Item6, Serializer6);

        public override bool Instantiate(out (T1, T2, T3, T4, T5, T6) instance, in DeserializeContext context)
        {
            if (context.Deserialize(out T1 item1, Serializer1) && context.Deserialize(out T2 item2, Serializer2) && context.Deserialize(out T3 item3, Serializer3) && context.Deserialize(out T4 item4, Serializer4) && context.Deserialize(out T5 item5, Serializer5) && context.Deserialize(out T6 item6, Serializer6))
            {
                instance = (item1, item2, item3, item4, item5, item6);
                return true;
            }
            instance = default;
            return false;
        }

        public override bool Initialize(ref (T1, T2, T3, T4, T5, T6) instance, in DeserializeContext context) => true;
    }
    public sealed class ConcreteTuple<T1, T2, T3, T4, T5, T6, T7> : Serializer<(T1, T2, T3, T4, T5, T6, T7)>
    {
        public readonly Serializer<T1> Serializer1; public readonly Serializer<T2> Serializer2; public readonly Serializer<T3> Serializer3; public readonly Serializer<T4> Serializer4; public readonly Serializer<T5> Serializer5; public readonly Serializer<T6> Serializer6; public readonly Serializer<T7> Serializer7;

        public ConcreteTuple(Serializer<T1> serializer1 = null, Serializer<T2> serializer2 = null, Serializer<T3> serializer3 = null, Serializer<T4> serializer4 = null, Serializer<T5> serializer5 = null, Serializer<T6> serializer6 = null, Serializer<T7> serializer7 = null)
        {
            Serializer1 = serializer1; Serializer2 = serializer2; Serializer3 = serializer3; Serializer4 = serializer4; Serializer5 = serializer5; Serializer6 = serializer6; Serializer7 = serializer7;
        }

        public override bool Serialize(in (T1, T2, T3, T4, T5, T6, T7) instance, in SerializeContext context) =>
            context.Serialize(instance.Item1, Serializer1) && context.Serialize(instance.Item2, Serializer2) && context.Serialize(instance.Item3, Serializer3) && context.Serialize(instance.Item4, Serializer4) && context.Serialize(instance.Item5, Serializer5) && context.Serialize(instance.Item6, Serializer6) && context.Serialize(instance.Item7, Serializer7);

        public override bool Instantiate(out (T1, T2, T3, T4, T5, T6, T7) instance, in DeserializeContext context)
        {
            if (context.Deserialize(out T1 item1, Serializer1) && context.Deserialize(out T2 item2, Serializer2) && context.Deserialize(out T3 item3, Serializer3) && context.Deserialize(out T4 item4, Serializer4) && context.Deserialize(out T5 item5, Serializer5) && context.Deserialize(out T6 item6, Serializer6) && context.Deserialize(out T7 item7, Serializer7))
            {
                instance = (item1, item2, item3, item4, item5, item6, item7);
                return true;
            }
            instance = default;
            return false;
        }

        public override bool Initialize(ref (T1, T2, T3, T4, T5, T6, T7) instance, in DeserializeContext context) => true;
    }
}