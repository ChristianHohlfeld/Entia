/* DO NOT MODIFY: The content of this file has been generated by the script 'Node.Run.csx'. */

using Entia.Injectables;
using Entia.Experimental.Systems;

namespace Entia.Experimental
{
    namespace Systems
    {
        public delegate void Run<T>(ref T resource1) where T : struct, IResource;
        public delegate void RunM<TMessage, T>(in TMessage message, ref T resource1) where TMessage : struct, IMessage where T : struct, IResource;
        public delegate void RunMM<TMessage1, TMessage2, T>(in TMessage1 message1, in TMessage2 message2, ref T resource1) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T : struct, IResource;
        public delegate void Run<T1, T2>(ref T1 resource1, ref T2 resource2) where T1 : struct, IResource where T2 : struct, IResource;
        public delegate void RunM<TMessage, T1, T2>(in TMessage message, ref T1 resource1, ref T2 resource2) where TMessage : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource;
        public delegate void RunMM<TMessage1, TMessage2, T1, T2>(in TMessage1 message1, in TMessage2 message2, ref T1 resource1, ref T2 resource2) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource;
        public delegate void Run<T1, T2, T3>(ref T1 resource1, ref T2 resource2, ref T3 resource3) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource;
        public delegate void RunM<TMessage, T1, T2, T3>(in TMessage message, ref T1 resource1, ref T2 resource2, ref T3 resource3) where TMessage : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource;
        public delegate void RunMM<TMessage1, TMessage2, T1, T2, T3>(in TMessage1 message1, in TMessage2 message2, ref T1 resource1, ref T2 resource2, ref T3 resource3) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource;
        public delegate void Run<T1, T2, T3, T4>(ref T1 resource1, ref T2 resource2, ref T3 resource3, ref T4 resource4) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource;
        public delegate void RunM<TMessage, T1, T2, T3, T4>(in TMessage message, ref T1 resource1, ref T2 resource2, ref T3 resource3, ref T4 resource4) where TMessage : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource;
        public delegate void RunMM<TMessage1, TMessage2, T1, T2, T3, T4>(in TMessage1 message1, in TMessage2 message2, ref T1 resource1, ref T2 resource2, ref T3 resource3, ref T4 resource4) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource;
        public delegate void Run<T1, T2, T3, T4, T5>(ref T1 resource1, ref T2 resource2, ref T3 resource3, ref T4 resource4, ref T5 resource5) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource;
        public delegate void RunM<TMessage, T1, T2, T3, T4, T5>(in TMessage message, ref T1 resource1, ref T2 resource2, ref T3 resource3, ref T4 resource4, ref T5 resource5) where TMessage : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource;
        public delegate void RunMM<TMessage1, TMessage2, T1, T2, T3, T4, T5>(in TMessage1 message1, in TMessage2 message2, ref T1 resource1, ref T2 resource2, ref T3 resource3, ref T4 resource4, ref T5 resource5) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource;
    }

    public sealed partial class Node
    {
        public static partial class When<TReact>
        {
            public static Node Run<T>(Run<T> run) where T : struct, IResource =>
                With((Resource<T> resource1) => Run((in TReact message) => run(ref resource1.Value)));
            public static Node Run<T>(RunM<TReact, T> run) where T : struct, IResource =>
                With((Resource<T> resource1) => Run((in TReact message) => run(message, ref resource1.Value)));
            public static Node Run<T1, T2>(Run<T1, T2> run) where T1 : struct, IResource where T2 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2) => Run((in TReact message) => run(ref resource1.Value, ref resource2.Value)));
            public static Node Run<T1, T2>(RunM<TReact, T1, T2> run) where T1 : struct, IResource where T2 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2) => Run((in TReact message) => run(message, ref resource1.Value, ref resource2.Value)));
            public static Node Run<T1, T2, T3>(Run<T1, T2, T3> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3) => Run((in TReact message) => run(ref resource1.Value, ref resource2.Value, ref resource3.Value)));
            public static Node Run<T1, T2, T3>(RunM<TReact, T1, T2, T3> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3) => Run((in TReact message) => run(message, ref resource1.Value, ref resource2.Value, ref resource3.Value)));
            public static Node Run<T1, T2, T3, T4>(Run<T1, T2, T3, T4> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4) => Run((in TReact message) => run(ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value)));
            public static Node Run<T1, T2, T3, T4>(RunM<TReact, T1, T2, T3, T4> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4) => Run((in TReact message) => run(message, ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value)));
            public static Node Run<T1, T2, T3, T4, T5>(Run<T1, T2, T3, T4, T5> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4, Resource<T5> resource5) => Run((in TReact message) => run(ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value, ref resource5.Value)));
            public static Node Run<T1, T2, T3, T4, T5>(RunM<TReact, T1, T2, T3, T4, T5> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4, Resource<T5> resource5) => Run((in TReact message) => run(message, ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value, ref resource5.Value)));
        }

        public static partial class When<TReact, TReceive>
        {
            public static Node Run<T>(Run<T> run) where T : struct, IResource =>
                With((Resource<T> resource1) => Run((in TReact react, in TReceive receive) => run(ref resource1.Value)));
            public static Node Run<T>(RunM<TReceive, T> run) where T : struct, IResource =>
                With((Resource<T> resource1) => Run((in TReact react, in TReceive receive) => run(receive, ref resource1.Value)));
            public static Node Run<T>(RunMM<TReact, TReceive, T> run) where T : struct, IResource =>
                With((Resource<T> resource1) => Run((in TReact react, in TReceive receive) => run(react, receive, ref resource1.Value)));
            public static Node Run<T1, T2>(Run<T1, T2> run) where T1 : struct, IResource where T2 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2) => Run((in TReact react, in TReceive receive) => run(ref resource1.Value, ref resource2.Value)));
            public static Node Run<T1, T2>(RunM<TReceive, T1, T2> run) where T1 : struct, IResource where T2 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2) => Run((in TReact react, in TReceive receive) => run(receive, ref resource1.Value, ref resource2.Value)));
            public static Node Run<T1, T2>(RunMM<TReact, TReceive, T1, T2> run) where T1 : struct, IResource where T2 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2) => Run((in TReact react, in TReceive receive) => run(react, receive, ref resource1.Value, ref resource2.Value)));
            public static Node Run<T1, T2, T3>(Run<T1, T2, T3> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3) => Run((in TReact react, in TReceive receive) => run(ref resource1.Value, ref resource2.Value, ref resource3.Value)));
            public static Node Run<T1, T2, T3>(RunM<TReceive, T1, T2, T3> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3) => Run((in TReact react, in TReceive receive) => run(receive, ref resource1.Value, ref resource2.Value, ref resource3.Value)));
            public static Node Run<T1, T2, T3>(RunMM<TReact, TReceive, T1, T2, T3> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3) => Run((in TReact react, in TReceive receive) => run(react, receive, ref resource1.Value, ref resource2.Value, ref resource3.Value)));
            public static Node Run<T1, T2, T3, T4>(Run<T1, T2, T3, T4> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4) => Run((in TReact react, in TReceive receive) => run(ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value)));
            public static Node Run<T1, T2, T3, T4>(RunM<TReceive, T1, T2, T3, T4> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4) => Run((in TReact react, in TReceive receive) => run(receive, ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value)));
            public static Node Run<T1, T2, T3, T4>(RunMM<TReact, TReceive, T1, T2, T3, T4> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4) => Run((in TReact react, in TReceive receive) => run(react, receive, ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value)));
            public static Node Run<T1, T2, T3, T4, T5>(Run<T1, T2, T3, T4, T5> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4, Resource<T5> resource5) => Run((in TReact react, in TReceive receive) => run(ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value, ref resource5.Value)));
            public static Node Run<T1, T2, T3, T4, T5>(RunM<TReceive, T1, T2, T3, T4, T5> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4, Resource<T5> resource5) => Run((in TReact react, in TReceive receive) => run(receive, ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value, ref resource5.Value)));
            public static Node Run<T1, T2, T3, T4, T5>(RunMM<TReact, TReceive, T1, T2, T3, T4, T5> run) where T1 : struct, IResource where T2 : struct, IResource where T3 : struct, IResource where T4 : struct, IResource where T5 : struct, IResource =>
                With((Resource<T1> resource1, Resource<T2> resource2, Resource<T3> resource3, Resource<T4> resource4, Resource<T5> resource5) => Run((in TReact react, in TReceive receive) => run(react, receive, ref resource1.Value, ref resource2.Value, ref resource3.Value, ref resource4.Value, ref resource5.Value)));
        }
    }
}