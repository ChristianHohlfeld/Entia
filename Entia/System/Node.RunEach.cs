/* DO NOT MODIFY: The content of this file has been generated by the script 'Node.RunEach.csx'. */

using Entia.Dependencies;
using Entia.Experimental.Systems;

namespace Entia.Experimental
{
    namespace Systems
    {
        public delegate void RunEach<T>(ref T component1) where T : struct, IComponent;
        public delegate void RunEachE<T>(Entity entity, ref T component1) where T : struct, IComponent;
        public delegate void RunEachM<TMessage, T>(in TMessage message, ref T component1) where TMessage : struct, IMessage where T : struct, IComponent;
        public delegate void RunEachME<TMessage, T>(in TMessage message, Entity entity, ref T component1) where TMessage : struct, IMessage where T : struct, IComponent;
        public delegate void RunEachMM<TMessage1, TMessage2, T>(in TMessage1 message1, in TMessage2 message2, ref T component1) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T : struct, IComponent;
        public delegate void RunEachMME<TMessage1, TMessage2, T>(in TMessage1 message1, in TMessage2 message2, Entity entity, ref T component1) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T : struct, IComponent;
        public delegate void RunEach<T1, T2>(ref T1 component1, ref T2 component2) where T1 : struct, IComponent where T2 : struct, IComponent;
        public delegate void RunEachE<T1, T2>(Entity entity, ref T1 component1, ref T2 component2) where T1 : struct, IComponent where T2 : struct, IComponent;
        public delegate void RunEachM<TMessage, T1, T2>(in TMessage message, ref T1 component1, ref T2 component2) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent;
        public delegate void RunEachME<TMessage, T1, T2>(in TMessage message, Entity entity, ref T1 component1, ref T2 component2) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent;
        public delegate void RunEachMM<TMessage1, TMessage2, T1, T2>(in TMessage1 message1, in TMessage2 message2, ref T1 component1, ref T2 component2) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent;
        public delegate void RunEachMME<TMessage1, TMessage2, T1, T2>(in TMessage1 message1, in TMessage2 message2, Entity entity, ref T1 component1, ref T2 component2) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent;
        public delegate void RunEach<T1, T2, T3>(ref T1 component1, ref T2 component2, ref T3 component3) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent;
        public delegate void RunEachE<T1, T2, T3>(Entity entity, ref T1 component1, ref T2 component2, ref T3 component3) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent;
        public delegate void RunEachM<TMessage, T1, T2, T3>(in TMessage message, ref T1 component1, ref T2 component2, ref T3 component3) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent;
        public delegate void RunEachME<TMessage, T1, T2, T3>(in TMessage message, Entity entity, ref T1 component1, ref T2 component2, ref T3 component3) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent;
        public delegate void RunEachMM<TMessage1, TMessage2, T1, T2, T3>(in TMessage1 message1, in TMessage2 message2, ref T1 component1, ref T2 component2, ref T3 component3) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent;
        public delegate void RunEachMME<TMessage1, TMessage2, T1, T2, T3>(in TMessage1 message1, in TMessage2 message2, Entity entity, ref T1 component1, ref T2 component2, ref T3 component3) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent;
        public delegate void RunEach<T1, T2, T3, T4>(ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent;
        public delegate void RunEachE<T1, T2, T3, T4>(Entity entity, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent;
        public delegate void RunEachM<TMessage, T1, T2, T3, T4>(in TMessage message, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent;
        public delegate void RunEachME<TMessage, T1, T2, T3, T4>(in TMessage message, Entity entity, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent;
        public delegate void RunEachMM<TMessage1, TMessage2, T1, T2, T3, T4>(in TMessage1 message1, in TMessage2 message2, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent;
        public delegate void RunEachMME<TMessage1, TMessage2, T1, T2, T3, T4>(in TMessage1 message1, in TMessage2 message2, Entity entity, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent;
        public delegate void RunEach<T1, T2, T3, T4, T5>(ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4, ref T5 component5) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent;
        public delegate void RunEachE<T1, T2, T3, T4, T5>(Entity entity, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4, ref T5 component5) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent;
        public delegate void RunEachM<TMessage, T1, T2, T3, T4, T5>(in TMessage message, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4, ref T5 component5) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent;
        public delegate void RunEachME<TMessage, T1, T2, T3, T4, T5>(in TMessage message, Entity entity, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4, ref T5 component5) where TMessage : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent;
        public delegate void RunEachMM<TMessage1, TMessage2, T1, T2, T3, T4, T5>(in TMessage1 message1, in TMessage2 message2, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4, ref T5 component5) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent;
        public delegate void RunEachMME<TMessage1, TMessage2, T1, T2, T3, T4, T5>(in TMessage1 message1, in TMessage2 message2, Entity entity, ref T1 component1, ref T2 component2, ref T3 component3, ref T4 component4, ref T5 component5) where TMessage1 : struct, IMessage where TMessage2 : struct, IMessage where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent;
    }

    public sealed partial class Node
    {
        public static partial class When<TReact>
        {
            public static Node RunEach<T>(RunEach<T> run, Filter? filter = null) where T : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True),
                new Write(typeof(T)));
            public static Node RunEach<T>(RunEachE<T> run, Filter? filter = null) where T : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True),
                new Write(typeof(T)));
            public static Node RunEach<T>(RunEachM<TReact, T> run, Filter? filter = null) where T : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(message, ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True),
                new Write(typeof(T)));
            public static Node RunEach<T>(RunEachME<TReact, T> run, Filter? filter = null) where T : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(message, entities[i], ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True),
                new Write(typeof(T)));
            public static Node RunEach<T1, T2>(RunEach<T1, T2> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachE<T1, T2> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachM<TReact, T1, T2> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(message, ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachME<TReact, T1, T2> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(message, entities[i], ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2, T3>(RunEach<T1, T2, T3> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachE<T1, T2, T3> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachM<TReact, T1, T2, T3> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(message, ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachME<TReact, T1, T2, T3> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(message, entities[i], ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3, T4>(RunEach<T1, T2, T3, T4> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachE<T1, T2, T3, T4> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachM<TReact, T1, T2, T3, T4> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(message, ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachME<TReact, T1, T2, T3, T4> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(message, entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEach<T1, T2, T3, T4, T5> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachE<T1, T2, T3, T4, T5> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachM<TReact, T1, T2, T3, T4, T5> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(message, ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachME<TReact, T1, T2, T3, T4, T5> run, Filter? filter = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact message) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(message, entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True),
                new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
        }

        public static partial class When<TReact, TReceive>
        {
            public static Node RunEach<T>(RunEach<T> run, Filter? filter = null, int? capacity = null) where T : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True), capacity, new Write(typeof(T)));
            public static Node RunEach<T>(RunEachE<T> run, Filter? filter = null, int? capacity = null) where T : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True), capacity, new Write(typeof(T)));
            public static Node RunEach<T>(RunEachM<TReceive, T> run, Filter? filter = null, int? capacity = null) where T : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(receive, ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True), capacity, new Write(typeof(T)));
            public static Node RunEach<T>(RunEachME<TReceive, T> run, Filter? filter = null, int? capacity = null) where T : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(receive, entities[i], ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True), capacity, new Write(typeof(T)));
            public static Node RunEach<T>(RunEachMM<TReact, TReceive, T> run, Filter? filter = null, int? capacity = null) where T : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(react, receive, ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True), capacity, new Write(typeof(T)));
            public static Node RunEach<T>(RunEachMME<TReact, TReceive, T> run, Filter? filter = null, int? capacity = null) where T : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T>();
                    for (int i = 0; i < count; i++) run(react, receive, entities[i], ref store1[i]);
                },
                Filter.All<T>(filter ?? Filter.True), capacity, new Write(typeof(T)));
            public static Node RunEach<T1, T2>(RunEach<T1, T2> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachE<T1, T2> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachM<TReceive, T1, T2> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(receive, ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachME<TReceive, T1, T2> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(receive, entities[i], ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachMM<TReact, TReceive, T1, T2> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(react, receive, ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2>(RunEachMME<TReact, TReceive, T1, T2> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>();
                    for (int i = 0; i < count; i++) run(react, receive, entities[i], ref store1[i], ref store2[i]);
                },
                Filter.All<T1, T2>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)));
            public static Node RunEach<T1, T2, T3>(RunEach<T1, T2, T3> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachE<T1, T2, T3> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachM<TReceive, T1, T2, T3> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(receive, ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachME<TReceive, T1, T2, T3> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(receive, entities[i], ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachMM<TReact, TReceive, T1, T2, T3> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(react, receive, ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3>(RunEachMME<TReact, TReceive, T1, T2, T3> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>();
                    for (int i = 0; i < count; i++) run(react, receive, entities[i], ref store1[i], ref store2[i], ref store3[i]);
                },
                Filter.All<T1, T2, T3>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)));
            public static Node RunEach<T1, T2, T3, T4>(RunEach<T1, T2, T3, T4> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachE<T1, T2, T3, T4> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachM<TReceive, T1, T2, T3, T4> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(receive, ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachME<TReceive, T1, T2, T3, T4> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(receive, entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachMM<TReact, TReceive, T1, T2, T3, T4> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(react, receive, ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4>(RunEachMME<TReact, TReceive, T1, T2, T3, T4> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>();
                    for (int i = 0; i < count; i++) run(react, receive, entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i]);
                },
                Filter.All<T1, T2, T3, T4>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEach<T1, T2, T3, T4, T5> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachE<T1, T2, T3, T4, T5> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachM<TReceive, T1, T2, T3, T4, T5> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(receive, ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachME<TReceive, T1, T2, T3, T4, T5> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(receive, entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachMM<TReact, TReceive, T1, T2, T3, T4, T5> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(react, receive, ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
            public static Node RunEach<T1, T2, T3, T4, T5>(RunEachMME<TReact, TReceive, T1, T2, T3, T4, T5> run, Filter? filter = null, int? capacity = null) where T1 : struct, IComponent where T2 : struct, IComponent where T3 : struct, IComponent where T4 : struct, IComponent where T5 : struct, IComponent => RunEach(
                segment => (in TReact react, in TReceive receive) =>
                {
                    var (entities, count) = segment.Entities;
                    var store1 = segment.Store<T1>(); var store2 = segment.Store<T2>(); var store3 = segment.Store<T3>(); var store4 = segment.Store<T4>(); var store5 = segment.Store<T5>();
                    for (int i = 0; i < count; i++) run(react, receive, entities[i], ref store1[i], ref store2[i], ref store3[i], ref store4[i], ref store5[i]);
                },
                Filter.All<T1, T2, T3, T4, T5>(filter ?? Filter.True), capacity, new Write(typeof(T1)), new Write(typeof(T2)), new Write(typeof(T3)), new Write(typeof(T4)), new Write(typeof(T5)));
        }
    }
}