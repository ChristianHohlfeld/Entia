/* DO NOT MODIFY: The content of this file has been generated by the script 'Injectables.csx'. */

using Entia.Core;
using Entia.Dependables;
using Entia.Injectors;
using Entia.Modules;
using Entia.Queryables;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

namespace Entia.Injectables
{
    public readonly struct Group<T> : IInjectable, IDepend<Dependables.Read<Entity>, T>, IEnumerable<T>
        where T : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T>(world.Groups_OLD().Get(world.Queriers_OLD().Query<T>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly T this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<T> _group;

        public Group(Modules.Group.Group_OLD<T> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out T item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<T>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<T> IEnumerable<T>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2>, IEnumerable<All<T1, T2>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2>> IEnumerable<All<T1, T2>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2, T3> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3>, IEnumerable<All<T1, T2, T3>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2, T3>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2, T3>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2, T3> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2, T3>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2, T3>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2, T3> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2, T3>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2, T3>> IEnumerable<All<T1, T2, T3>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2, T3, T4> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4>, IEnumerable<All<T1, T2, T3, T4>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2, T3, T4>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2, T3, T4>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2, T3, T4> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2, T3, T4>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2, T3, T4>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2, T3, T4>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4>> IEnumerable<All<T1, T2, T3, T4>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2, T3, T4, T5> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5>, IEnumerable<All<T1, T2, T3, T4, T5>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2, T3, T4, T5>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2, T3, T4, T5>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2, T3, T4, T5> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5>> IEnumerable<All<T1, T2, T3, T4, T5>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2, T3, T4, T5, T6> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6>, IEnumerable<All<T1, T2, T3, T4, T5, T6>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2, T3, T4, T5, T6>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2, T3, T4, T5, T6>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2, T3, T4, T5, T6> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6>> IEnumerable<All<T1, T2, T3, T4, T5, T6>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2, T3, T4, T5, T6, T7> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6, T7>, IEnumerable<All<T1, T2, T3, T4, T5, T6, T7>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2, T3, T4, T5, T6, T7>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2, T3, T4, T5, T6, T7>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2, T3, T4, T5, T6, T7> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6, T7> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6, T7>> IEnumerable<All<T1, T2, T3, T4, T5, T6, T7>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2, T3, T4, T5, T6, T7, T8> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6, T7, T8>, IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2, T3, T4, T5, T6, T7, T8>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2, T3, T4, T5, T6, T7, T8>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2, T3, T4, T5, T6, T7, T8> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7, T8>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7, T8>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6, T7, T8> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7, T8>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6, T7, T8>> IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public readonly struct Group<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IInjectable, IDepend<Dependables.Read<Entity>, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
        where T1 : struct, IQueryable where T2 : struct, IQueryable where T3 : struct, IQueryable where T4 : struct, IQueryable where T5 : struct, IQueryable where T6 : struct, IQueryable where T7 : struct, IQueryable where T8 : struct, IQueryable where T9 : struct, IQueryable
    {
        sealed class Injector : IInjector
        {
            public Result<object> Inject(MemberInfo member, World world) => new Group<T1, T2, T3, T4, T5, T6, T7, T8, T9>(world.Groups_OLD().Get(world.Queriers_OLD().Query<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>(member)));
        }

        [Injector]
        static readonly Injector _injector = new Injector();

        public int Count => _group.Count;
        public ref readonly All<T1, T2, T3, T4, T5, T6, T7, T8, T9> this[int index] => ref _group[index];
        public IEnumerable<Entity> Entities => _group.Entities;

        readonly Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>> _group;

        public Group(Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>> group) { _group = group; }

        public bool Has(Entity entity) => _group.Has(entity);
        public bool TryGet(Entity entity, out All<T1, T2, T3, T4, T5, T6, T7, T8, T9> item) => _group.TryGet(entity, out item);

        public Modules.Group.Group_OLD<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Enumerator GetEnumerator() => _group.GetEnumerator();
        IEnumerator<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>> IEnumerable<All<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.GetEnumerator() => GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

}